"use strict";(self.webpackChunkeclipse_tractusx_github_io=self.webpackChunkeclipse_tractusx_github_io||[]).push([[7803],{26990:(t,e,i)=>{i.d(e,{A:()=>n});const n=i.p+"assets/images/data-trust-and-security-kit-logo-5d0fe5f40ded43523ee26666485b0d3b.svg"},28453:(t,e,i)=>{i.d(e,{R:()=>r,x:()=>c});var n=i(96540);const a={},s=n.createContext(a);function r(t){const e=n.useContext(s);return n.useMemo((function(){return"function"==typeof t?t(e):{...e,...t}}),[e,t])}function c(t){let e;return e=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:r(t.components),n.createElement(s.Provider,{value:e},t.children)}},31002:(t,e,i)=>{i.r(e),i.d(e,{assets:()=>o,contentTitle:()=>c,default:()=>u,frontMatter:()=>r,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"kits/data-trust-and-security-kit/software-development-view/digital-twins","title":"Digital Twins & Storage","description":"Digital Twin Integration, Certification Processes, Implementation Best Practices and Roadmap for Data Trust & Security KIT","source":"@site/docs-kits/kits/data-trust-and-security-kit/software-development-view/digital-twins.md","sourceDirName":"kits/data-trust-and-security-kit/software-development-view","slug":"/kits/data-trust-and-security-kit/software-development-view/digital-twins","permalink":"/next-eclipse-tractusx.github.io/docs-kits/next/kits/data-trust-and-security-kit/software-development-view/digital-twins","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"id":"digital-twins","title":"Digital Twins & Storage","description":"Digital Twin Integration, Certification Processes, Implementation Best Practices and Roadmap for Data Trust & Security KIT"},"sidebar":"kits","previous":{"title":"Verifiable Credential Framework","permalink":"/next-eclipse-tractusx.github.io/docs-kits/next/kits/data-trust-and-security-kit/software-development-view/verifiable-credentials"},"next":{"title":"Semantic Context Verification","permalink":"/next-eclipse-tractusx.github.io/docs-kits/next/kits/data-trust-and-security-kit/software-development-view/semantic-verification"}}');var a=i(74848),s=i(28453);const r={id:"digital-twins",title:"Digital Twins & Storage",description:"Digital Twin Integration, Certification Processes, Implementation Best Practices and Roadmap for Data Trust & Security KIT"},c=void 0,o={},d=[{value:"Connecting with Your Digital Twins",id:"connecting-with-your-digital-twins",level:2},{value:"Using Certificates as Digital Twin Components",id:"using-certificates-as-digital-twin-components",level:3},{value:"How It Works in Practice",id:"how-it-works-in-practice",level:4},{value:"Data Attestation Certificate as Submodel",id:"data-attestation-certificate-as-submodel",level:4},{value:"Semantic ID Configuration",id:"semantic-id-configuration",level:3},{value:"Certification Processes",id:"certification-processes",level:2},{value:"Attribute Certification Process",id:"attribute-certification-process",level:3},{value:"Self-Attestation Process",id:"self-attestation-process",level:3},{value:"NOTICE",id:"notice",level:2}];function l(t){const e={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...t.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:(0,a.jsx)(e.img,{alt:"Data Trust &amp; Security KIT Icon",src:i(26990).A+""})}),"\n",(0,a.jsx)(e.h2,{id:"connecting-with-your-digital-twins",children:"Connecting with Your Digital Twins"}),"\n",(0,a.jsx)(e.h3,{id:"using-certificates-as-digital-twin-components",children:"Using Certificates as Digital Twin Components"}),"\n",(0,a.jsx)(e.p,{children:"One of the most powerful features of the Data Trust & Security KIT is that you can attach verifiable credentials directly to your digital twins. This means when someone looks up a product or component in your Digital Twin Registry, they can immediately see the trust certificates associated with it."}),"\n",(0,a.jsxs)(e.p,{children:["Think of it like attaching a quality certificate to a physical product, except this is digital and cryptographically secured. The implementation follows ",(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.a,{href:"https://catenax-ev.github.io/docs/standards/CX-0002-DigitalTwinsInCatenaX",children:"Catena-X CX-0002 Digital Twins"})})," standard for registry integration and ",(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.a,{href:"https://www.w3.org/TR/vc-data-model-2.0/",children:"W3C Verifiable Credentials"})})," format for the credential structure."]}),"\n",(0,a.jsx)(e.h4,{id:"how-it-works-in-practice",children:"How It Works in Practice"}),"\n",(0,a.jsx)(e.p,{children:"When you register a digital twin, you can include submodels that contain verifiable credentials. Here's what this looks like technically:"}),"\n",(0,a.jsx)(e.h4,{id:"data-attestation-certificate-as-submodel",children:"Data Attestation Certificate as Submodel"}),"\n",(0,a.jsx)(e.p,{children:"Here\u2019s an example of how a data attestation credential might look as a submodel:"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-json",children:'{\n  "endpoints": [\n      {\n          "interface": "SUBMODEL-3.0",\n          "protocolInformation": {\n              "href": "https://<edc.dataplane>/api/public/data/urn:uuid:a377ff49-6bde-4215-8d38-b8f02c991a35/credential",\n              "endpointProtocol": "HTTP",\n              "endpointProtocolVersion": ["1.1"],\n              "subprotocol": "DSP",\n              "subprotocolBody": "id=urn:uuid:3e4a5957-f226-478a-ab18-79ced49d6195;dspEndpoint=https://edc.controlplane/api/v1/dsp",\n              "subprotocolBodyEncoding": "plain",\n              "securityAttributes": [\n                  {\n                      "type": "NONE",\n                      "key": "NONE", \n                      "value": "NONE"\n                  }\n              ]\n          }\n      }\n  ],\n  "idShort": "pcfDataAttestation",\n  "id": "urn:uuid:a377ff49-6bde-4215-8d38-b8f02c991a35",\n  "semanticId": {\n      "type": "ExternalReference",\n      "keys": [\n          {\n              "type": "Entity",\n              "value": "https://www.w3.org/ns/credentials/v2"\n          },\n          {\n              "type": "DataElement", \n              "value": "https://raw.githubusercontent.com/eclipse-tractusx/tractusx-profiles/refs/heads/main/tx/credentials/schema/context/dac/v1/DataAttestationCredential.jsonld"\n          },\n          {\n              "type": "Submodel",\n              "value": "urn:samm:io.catenax.pcf:7.0.0#Pcf"\n          },\n          {\n              "type": "Operation",\n              "value": "https://w3c.github.io/vc-jws-2020/contexts/v1/"\n          }\n      ]\n  },\n  "description": [\n      {\n          "language": "en",\n          "text": "Verifiable Data Attestation Submodel"\n      }\n  ],\n  "displayName": []\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"semantic-id-configuration",children:"Semantic ID Configuration"}),"\n",(0,a.jsx)(e.p,{children:"For different submodels, different semantic ID structures are used to identify various aspects and content types:"}),"\n",(0,a.jsxs)(e.table,{children:[(0,a.jsx)(e.thead,{children:(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.th,{children:"Type"}),(0,a.jsx)(e.th,{children:"Description"}),(0,a.jsx)(e.th,{children:"Example"})]})}),(0,a.jsxs)(e.tbody,{children:[(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"Entity"})}),(0,a.jsx)(e.td,{children:"Highest abstraction level indicating credential format"}),(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"https://www.w3.org/ns/credentials/v2"})})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"DataElement"})}),(0,a.jsx)(e.td,{children:"Type of verifiable credential/presentation indicated with the uri"}),(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"https://raw.githubusercontent.com/eclipse-tractusx/tractusx-profiles/refs/heads/main/tx/credentials/schema/context/dac/v1/DataAttestationCredential.jsonld"})})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"Submodel"})}),(0,a.jsx)(e.td,{children:"Aspect model type and structure reference"}),(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"urn:samm:io.catenax.pcf:7.0.0#Pcf"})})]}),(0,a.jsxs)(e.tr,{children:[(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"Operation"})}),(0,a.jsx)(e.td,{children:"Signature type context for verification"}),(0,a.jsx)(e.td,{children:(0,a.jsx)(e.code,{children:"https://w3c.github.io/vc-jws-2020/contexts/v1/"})})]})]})]}),"\n",(0,a.jsx)(e.h2,{id:"certification-processes",children:"Certification Processes"}),"\n",(0,a.jsx)(e.h3,{id:"attribute-certification-process",children:"Attribute Certification Process"}),"\n",(0,a.jsx)(e.p,{children:"The attribute certification process enables third-party auditors to verify specific attributes within aspect models:"}),"\n",(0,a.jsx)(e.mermaid,{value:"sequenceDiagram\n    participant DP as Data Provider\n    participant DTR as Digital Twin Registry\n    participant SS as Submodel Service\n    participant DA as Attestation Provider\n    participant AW as Attestation Provider Wallet\n    \n    DP->>DTR: Register Twin\n    DP->>SS: Register Aspect Model\n    DP->>DA: Request Attribute Certification\n    DA->>DTR: Query Digital Twin via Connector\n    DA->>SS: Query Aspect Model via Connector\n    DA->>DA: Validate Attributes\n    DA->>DA: Create Attribute Attestation Payload\n    DA->>AW: Issue Attribute Attestation Credential (AAC)\n    AW->>AW: Add to revocation list\n    AW->>DA: Issued Verifiable Credential\n    DA->>DP: Return AAC via Connector\n    DP->>DTR: Update Twin with new Verification Record Submodel\n    DP->>SS: Store Verifiable Credential"}),"\n",(0,a.jsx)(e.h3,{id:"self-attestation-process",children:"Self-Attestation Process"}),"\n",(0,a.jsx)(e.p,{children:"Data providers can self-attest their data by creating signed verifiable credentials:"}),"\n",(0,a.jsx)(e.mermaid,{value:"sequenceDiagram\n    participant DP as Data Provider\n    participant Wallet as Wallet\n    participant DTR as Digital Twin Registry\n    participant SS as Submodel Service\n    \n    DP->>DP: Prepare Aspect Model Data\n    DP->>Wallet: Create Verifiable Credential\n    Wallet->>Wallet: Sign with Private Key\n    Wallet->>DP: Return Signed Credential\n    DP->>DTR: Register as Submodel\n    DP->>SS: Store Verifiable Credential Payload"}),"\n",(0,a.jsx)(e.h2,{id:"notice",children:"NOTICE"}),"\n",(0,a.jsxs)(e.p,{children:["This work is licensed under the ",(0,a.jsx)(e.a,{href:"https://creativecommons.org/licenses/by/4.0/legalcode",children:"CC-BY-4.0"}),"."]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"SPDX-License-Identifier: CC-BY-4.0"}),"\n",(0,a.jsx)(e.li,{children:"SPDX-FileCopyrightText: 2025 Contributors to the Eclipse Foundation"}),"\n",(0,a.jsxs)(e.li,{children:["Source URL: ",(0,a.jsx)(e.a,{href:"https://github.com/eclipse-tractusx/eclipse-tractusx.github.io",children:"https://github.com/eclipse-tractusx/eclipse-tractusx.github.io"})]}),"\n"]})]})}function u(t={}){const{wrapper:e}={...(0,s.R)(),...t.components};return e?(0,a.jsx)(e,{...t,children:(0,a.jsx)(l,{...t})}):l(t)}}}]);